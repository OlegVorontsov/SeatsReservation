// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeatsReservation.Infrastructure.Postgres.Write;

#nullable disable

namespace SeatsReservation.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ApplicationWriteDbContext))]
    [Migration("20250716074750_AddIndexSeatIdEventId")]
    partial class AddIndexSeatIdEventId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("seats_reservation")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<string>("EventInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_info");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.ComplexProperty<Dictionary<string, object>>("Details", "SeatsReservation.Domain.Entities.Events.Event.Details#EventDetails", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Capacity")
                                .HasColumnType("integer")
                                .HasColumnName("capacity");

                            b1.Property<string>("Description")
                                .HasColumnType("text")
                                .HasColumnName("description");
                        });

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_events_venue_id");

                    b.ToTable("events", "seats_reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reservation_status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.ToTable("reservations", "seats_reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Reservations.ReservationSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("seat_id");

                    b.Property<Guid>("reservation_id")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.HasKey("Id")
                        .HasName("pk_reservation_seats");

                    b.HasIndex("reservation_id")
                        .HasDatabaseName("ix_reservation_seats_reservation_id");

                    b.HasIndex("SeatId", "EventId")
                        .IsUnique()
                        .HasDatabaseName("ix_reservation_seats_seat_id_event_id");

                    b.ToTable("reservation_seats", "seats_reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Venues.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("RowNumber")
                        .HasColumnType("integer")
                        .HasColumnName("row_number");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer")
                        .HasColumnName("seat_number");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uuid")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_seats");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_seats_venue_id");

                    b.ToTable("seats", "seats_reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Venues.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("SeatsLimit")
                        .HasColumnType("integer")
                        .HasColumnName("seats_limit");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SeatsReservation.Domain.Entities.Venues.Venue.Name#VenueName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("name");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("prefix");
                        });

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.ToTable("venues", "seats_reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("SeatsReservation.Domain.Entities.Venues.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_venues_venue_id");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Reservations.ReservationSeat", b =>
                {
                    b.HasOne("SeatsReservation.Domain.Entities.Venues.Seat", null)
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservation_seats_seats_seat_id");

                    b.HasOne("SeatsReservation.Domain.Entities.Reservations.Reservation", "Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("reservation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservation_seats_reservations_reservation_id");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Venues.Seat", b =>
                {
                    b.HasOne("SeatsReservation.Domain.Entities.Venues.Venue", "Venue")
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_seats_venues_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Reservations.Reservation", b =>
                {
                    b.Navigation("ReservedSeats");
                });

            modelBuilder.Entity("SeatsReservation.Domain.Entities.Venues.Venue", b =>
                {
                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
